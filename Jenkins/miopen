timestamps {
    node ("$node") {
    sh '''
    whoami
    '''
def build_success = true

def cid = sh(script: 'sudo docker run -d -it --shm-size 16G --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --device=/dev/kfd --device=/dev/dri --group-add video --group-add 44 -it -v $HOME/dockerx:/dockerx $docker', returnStdout: true)

try {
    stage ('JOB1 (MIOPEN) - HIP tests')
    {
    sh '''
	sudo docker exec -i $cid bash -c 'cd ~/dockerx/MLSEQA_TestRepo/ ; git stash ; git pull https://RadeonOpenCompute/MLSEQA_TestRepo.git'
	sudo docker exec -i $cid bash -c 'cd /dockerx/MLSEQA_TestRepo/utils ; chmod +x install_automation_prerequisites.sh ; ./install_automation_prerequisites.sh '
    sudo docker exec -i $cid bash -c 'scl enable devtoolset-7 bash ; gcc -v'
	sudo docker exec -i $cid bash -c 'cd /dockerx/MLSEQA_TestRepo/Sanity/Unittests_Automation/Miopen/; python3.6 miopen_ut.py HIP -s'
	'''
    }
    }
    
    catch (Exception e) 
	{
    build_success = false
    echo e.toString()
    echo "'JOB1 (MIOPEN) - HIP tests' stage failed."
    }

try {
    stage ('JOB2 (MIOPEN) - OPENCL tests')
    {
    sh '''
    sudo docker exec -i $cid bash -c 'cd /dockerx/MLSEQA_TestRepo/Sanity/Unittests_Automation/Miopen/ ; python3.6 miopen_ut.py OPENCL -s'
	'''
    }
    }
    
    catch (Exception e) 
	{
    build_success = false
    echo e.toString()
    echo "'JOB2 (MIOPEN) - OPENCL tests stage failed."
	}

}
}
