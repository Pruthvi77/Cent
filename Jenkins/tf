timestamps {
    node ("$node") {
    sh '''
	whoami
    '''
def build_success = true

def cid = sh(script: 'sudo docker run -d -it --shm-size 16G --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --device=/dev/kfd --device=/dev/dri --group-add video --group-add 44 -it -v $HOME/dockerx:/dockerx $docker', returnStdout: true)

try {
    stage ('JOB1 (TF) - Unit tests')
    {
    sh '''
	sudo docker exec -i $cid bash -c 'cd ~/dockerx/MLSEQA_TestRepo/ ; git stash ; git pull; https://github.com/RadeonOpenCompute/MLSEQA_TestRepo.git'
	
    sudo docker exec -i $cid bash -c 'cd /dockerx/MLSEQA_TestRepo/utils; chmod +x install_automation_prerequisites.sh; ./install_automation_prerequisites.sh'
	sudo docker exec -i $cid bash -c 'cd /dockerx/MLSEQA_TestRepo/utils/Test_Framework_APIs/mlpmo_executor; python3.6 mlpmo_executor.py --configfile sample_configs/framework/RaviPram/tf_executor.json'
    '''
    }
    }
    
    catch (Exception e) 
	{
    build_success = false
    echo e.toString()
    echo "'JOB1 (TF) - Unit tests' stage failed."
    }
	
try {
    stage ('JOB2 (TF) - Functional Tests')
    {
    sh '''	
    sudo docker exec -i $cid bash -c 'cd /dockerx/MLSEQA_TestRepo/utils; chmod +x install_automation_prerequisites.sh; ./install_automation_prerequisites.sh'
	sudo docker exec -i $cid bash -c 'cd /dockerx/MLSEQA_TestRepo/Frameworks/tensorflow/TF-Functional-Tests; python3.6 runme_TF_py3.py'
	'''
    }
    }
    
    catch (Exception e) 
	{
    build_success = false
    echo e.toString()
    echo "'JOB2 (TF) - Functional Tests' stage failed."
    }
	
}
}
